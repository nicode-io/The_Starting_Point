{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/GameScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Number from \"../components/Number\";\nimport TitleText from \"../components/Text/TitleText\";\n\nvar generateRandomNumber = function generateRandomNumber(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomNumber(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomNumber(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  var currentMin = useRef(1);\n  var currentMax = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < props.userChoice || direction === 'greater' && currentGuess > props.userChoice) {\n      Alert.alert('Don\\'t lie !', 'Computer know you\\'re cheating ;)', [{\n        text: 'Sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n\n    if (direction === 'lower') {\n      currentMax.current = currentGuess;\n    } else {\n      currentMin.current = currentGuess;\n    }\n\n    var nextNumber = generateRandomNumber(currentMin.current, currentMax.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setRounds(function (prevRounds) {\n      return prevRounds += 1;\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(TitleText, {\n    style: _objectSpread({}, props.style),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Opponent's Guess\"), React.createElement(Number, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: nextGuessHandler.bind(_this, 'lower'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: nextGuessHandler.bind(_this, 'greater'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 10\n  },\n  buttonContainer: {\n    width: 300,\n    maxWidth: '80%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20,\n    backgroundColor: Colors.yellow\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/GameScreen.js"],"names":["React","useEffect","useRef","useState","Card","Colors","Number","TitleText","generateRandomNumber","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","rounds","setRounds","currentMin","currentMax","onGameOver","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","prevRounds","styles","screen","buttonContainer","bind","StyleSheet","create","flex","alignItems","padding","width","maxWidth","flexDirection","justifyContent","marginTop","backgroundColor","yellow"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport {Alert, Button, StyleSheet, Text, View} from \"react-native\";\n\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Number from \"../components/Number\";\nimport TitleText from \"../components/Text/TitleText\";\n\n\n// Random number generation\nconst generateRandomNumber = (min, max, exclude) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    const rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n    // Check if random is the same as user choice\n    if (rndNum === exclude) {\n        return generateRandomNumber(min, max, exclude);\n    } else {\n        return rndNum;\n    }\n}\n\nconst GameScreen = props => {\n\n    // States\n    const [currentGuess, setCurrentGuess] = useState(\n        generateRandomNumber(1, 100, props.userChoice)\n    );\n    const [rounds, setRounds] = useState(0);\n    const currentMin = useRef(1);\n    const currentMax = useRef(100);\n\n    // Props destructuring\n    const {userChoice, onGameOver} = props;\n\n    // Effects\n    useEffect(() => {\n        if (currentGuess === userChoice) {\n            onGameOver(rounds);\n        }\n    }, [currentGuess, userChoice, onGameOver])\n\n    // Rounds management\n    const nextGuessHandler = direction => {\n        if (\n            (direction === 'lower' && currentGuess < props.userChoice) ||\n            (direction === 'greater' && currentGuess > props.userChoice)\n        ) {\n            Alert.alert('Don\\'t lie !', 'Computer know you\\'re cheating ;)', [\n                {text: 'Sorry!', style: 'cancel'}\n            ]);\n            return;\n        }\n        if (direction === 'lower') {\n            currentMax.current = currentGuess;\n        } else {\n            currentMin.current = currentGuess;\n        }\n\n        const nextNumber = generateRandomNumber(\n            currentMin.current,\n            currentMax.current,\n            currentGuess\n        );\n        setCurrentGuess(nextNumber);\n        setRounds(prevRounds => prevRounds += 1);\n    };\n\n    return (\n        <View style={styles.screen}>\n            <TitleText style={{...props.style}}>\n                Opponent's Guess\n            </TitleText>\n            <Number>{currentGuess}</Number>\n            <Card style={styles.buttonContainer}>\n                <Button title=\"LOWER\" onPress={nextGuessHandler.bind(this, 'lower')}/>\n                <Button title=\"GREATER\" onPress={nextGuessHandler.bind(this, 'greater')}/>\n            </Card>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        alignItems: 'center',\n        padding: 10,\n    },\n    buttonContainer: {\n        width: 300,\n        maxWidth: '80%',\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        marginTop: 20,\n        backgroundColor: Colors.yellow,\n    }\n});\n\nexport default GameScreen\n"]},"metadata":{},"sourceType":"module"}