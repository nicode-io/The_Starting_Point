{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/GameScreen.js\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Number from \"../components/Number\";\n\nvar generateRandomNumber = function generateRandomNumber(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomNumber();\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomNumber(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  var currentMin = useRef(1);\n  var currentMax = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < props.userChoice || direction === 'greater' && currentGuess > props.userChoice) {\n      Alert.alert('Don\\'t lie !', 'Computer know you\\'re cheating ;)', [{\n        text: 'Sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n\n    if (direction === 'lower') {\n      currentMax.current = currentGuess;\n    } else {\n      currentMin.current = currentGuess;\n    }\n\n    var nextNumber = generateRandomNumber(currentMin.current, currentMax.current, currentGuess);\n    setRounds(function (prevRounds) {\n      return prevRounds += 1;\n    });\n    setCurrentGuess(nextNumber);\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Opponent's Guess\"), React.createElement(Number, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: nextGuessHandler.bind(_this, 'lower'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: nextGuessHandler.bind(_this, 'greater'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20,\n    width: 300,\n    maxWidth: '80%',\n    backgroundColor: Colors.yellow\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/GameScreen.js"],"names":["React","useEffect","useRef","useState","Card","Colors","Number","generateRandomNumber","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","rounds","setRounds","currentMin","currentMax","onGameOver","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","prevRounds","styles","screen","buttonContainer","bind","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth","backgroundColor","yellow"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport {Alert, Button, StyleSheet, Text, View} from \"react-native\";\n\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Number from \"../components/Number\";\n\n\n// Random number generation\nconst generateRandomNumber = (min, max, exclude) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n\n    const rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n    // Check if random is the same as user choice\n    if (rndNum === exclude) {\n        return generateRandomNumber();\n    } else {\n        return rndNum;\n    }\n}\n\nconst GameScreen = props => {\n\n    // States\n    const [currentGuess, setCurrentGuess] = useState(\n        generateRandomNumber(1, 100, props.userChoice)\n    );\n    const [rounds, setRounds] = useState(0);\n    const currentMin = useRef(1);\n    const currentMax = useRef(100);\n\n    // Props destructuring\n    const { userChoice, onGameOver } = props;\n\n    // Effects\n    useEffect(() => {\n        if (currentGuess === userChoice) {\n            onGameOver(rounds);\n        }\n    }, [currentGuess, userChoice, onGameOver])\n\n    // Rounds management\n    const nextGuessHandler = direction => {\n        if ((direction === 'lower' && currentGuess < props.userChoice)\n            || (direction === 'greater' && currentGuess > props.userChoice)) {\n            Alert.alert('Don\\'t lie !', 'Computer know you\\'re cheating ;)', [{\n                text: 'Sorry!', style: 'cancel'\n            }]);\n            return;\n        }\n        if (direction === 'lower') {\n            currentMax.current = currentGuess;\n        } else {\n            currentMin.current = currentGuess;\n        }\n\n        const nextNumber = generateRandomNumber(currentMin.current, currentMax.current, currentGuess);\n        setRounds(prevRounds => prevRounds += 1);\n        setCurrentGuess(nextNumber);\n    };\n\n    return (\n        <View style={styles.screen}>\n            <Text>Opponent's Guess</Text>\n            <Number>{currentGuess}</Number>\n            <Card style={styles.buttonContainer}>\n                <Button title=\"LOWER\" onPress={nextGuessHandler.bind(this, 'lower')}/>\n                <Button title=\"GREATER\" onPress={nextGuessHandler.bind(this, 'greater')}/>\n            </Card>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        padding: 10,\n        alignItems: 'center'\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        marginTop: 20,\n        width: 300,\n        maxWidth: '80%',\n        backgroundColor: Colors.yellow,\n    }\n});\n\nexport default GameScreen\n"]},"metadata":{},"sourceType":"module"}