{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/StartGameScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Card from \"../components/Card\";\nimport Input from \"../components/Text/Input\";\nimport Colors from \"../constants/colors\";\nimport Number from \"../components/Number\";\nimport TitleText from \"../components/Text/TitleText\";\nimport BodyText from \"../components/Text/BodyText\";\n\nvar StartGameScreen = function StartGameScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmStartGame = _useState4[0],\n      setConfirmStartGame = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedNumber = _useState6[0],\n      setSelectedNumber = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmed = _useState8[0],\n      setConfirmed = _useState8[1];\n\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredValue(inputText.replace(/[^0-9]/g, ''));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue('');\n    setConfirmStartGame(false);\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredValue);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert('Invalid number', 'Number must be between 1 and 99', [{\n        text: 'Got It',\n        style: 'cancel',\n        onPress: resetInputHandler\n      }]);\n    } else {\n      Alert.alert(\"We are ready to go\", \"Do you confirm \" + enteredValue + \" for this game ?\", [{\n        text: \"Cancel\",\n        onPress: function onPress() {\n          return console.log('Game cancelled');\n        },\n        style: \"cancel\"\n      }, {\n        text: \"OK\",\n        onPress: function onPress() {\n          setConfirmStartGame(true);\n          setSelectedNumber(chosenNumber);\n          setEnteredValue('');\n          setConfirmed(true);\n          Keyboard.dismiss();\n        }\n      }]);\n    }\n  };\n\n  var confirmedOutput;\n\n  if (confirmed && confirmStartGame) {\n    confirmedOutput = React.createElement(Card, {\n      style: styles.confirmed,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, React.createElement(TitleText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"Let's start !\"), React.createElement(BodyText, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"You choose :\"), React.createElement(Number, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, selectedNumber), React.createElement(Button, {\n      title: \"START GAME\",\n      color: Colors.green,\n      onPress: function onPress() {\n        props.onStartGame(selectedNumber);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, React.createElement(TitleText, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Start a New Game !\"), React.createElement(Card, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, React.createElement(BodyText, {\n    style: _objectSpread(_objectSpread({}, props.style), styles.text),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, \"Select a Number (1-99)\"), React.createElement(Input, {\n    style: styles.input,\n    blurOnSubmit: true,\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    keyboardType: \"numeric\",\n    maxLength: 2,\n    onChangeText: numberInputHandler,\n    value: enteredValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }), React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, React.createElement(View, {\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, React.createElement(Button, {\n    title: \"Reset\",\n    onPress: resetInputHandler,\n    color: Colors.red,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  })), React.createElement(View, {\n    style: styles.button,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, React.createElement(Button, {\n    title: \"Confirm\",\n    onPress: function onPress() {\n      confirmInputHandler();\n    },\n    color: Colors.blurple,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 33\n    }\n  })))), confirmedOutput)));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    width: '100%',\n    justifyContent: 'space-between',\n    paddingHorizontal: 15\n  },\n  button: {\n    flex: 1,\n    marginHorizontal: 10\n  },\n  confirmed: {\n    width: 500,\n    maxWidth: '80%',\n    marginVertical: 15,\n    backgroundColor: Colors.blurple\n  },\n  inputContainer: {\n    width: 500,\n    maxWidth: '80%',\n    alignItems: 'center',\n    backgroundColor: Colors.yellow\n  },\n  input: {\n    width: 50,\n    textAlign: 'center'\n  },\n  text: {\n    color: Colors.blurple\n  }\n});\nexport default StartGameScreen;","map":{"version":3,"sources":["/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/screens/StartGameScreen.js"],"names":["React","useState","Card","Input","Colors","Number","TitleText","BodyText","StartGameScreen","props","enteredValue","setEnteredValue","confirmStartGame","setConfirmStartGame","selectedNumber","setSelectedNumber","confirmed","setConfirmed","numberInputHandler","inputText","replace","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","console","log","Keyboard","dismiss","confirmedOutput","styles","green","onStartGame","screen","inputContainer","input","buttonContainer","button","red","blurple","StyleSheet","create","flex","padding","alignItems","flexDirection","width","justifyContent","paddingHorizontal","marginHorizontal","maxWidth","marginVertical","backgroundColor","yellow","textAlign","color"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {View, Text, StyleSheet, Button, TouchableWithoutFeedback, Keyboard, Alert, ScrollView} from 'react-native';\n\nimport Card from '../components/Card';\nimport Input from '../components/Text/Input';\nimport Colors from '../constants/colors';\nimport Number from \"../components/Number\";\nimport TitleText from \"../components/Text/TitleText\";\nimport BodyText from \"../components/Text/BodyText\";\n\nconst StartGameScreen = props => {\n\n    // States\n    const [enteredValue, setEnteredValue] = useState('');\n    const [confirmStartGame, setConfirmStartGame] = useState(false);\n    const [selectedNumber, setSelectedNumber] = useState(0);\n    const [confirmed, setConfirmed] = useState(false);\n\n    // Filter user input\n    const numberInputHandler = inputText => {\n        setEnteredValue(inputText.replace(/[^0-9]/g, ''));\n    };\n\n    // Reset user input\n    const resetInputHandler = () => {\n        setEnteredValue('');\n        setConfirmStartGame(false);\n        setConfirmed(false);\n    }\n\n\n    // User choice confirmation\n    const confirmInputHandler = () => {\n        const chosenNumber = parseInt(enteredValue);\n        if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n            Alert.alert('Invalid number', 'Number must be between 1 and 99', [{\n                text: 'Got It', style: 'cancel', onPress: resetInputHandler\n            }])\n        } else {\n            Alert.alert(\n                \"We are ready to go\",\n                `Do you confirm ${enteredValue} for this game ?`,\n                [\n                    {\n                        text: \"Cancel\",\n                        onPress: () => console.log('Game cancelled'),\n                        style: \"cancel\"\n                    },\n                    {\n                        text: \"OK\", onPress: () => {\n                            setConfirmStartGame(true);\n                            setSelectedNumber(chosenNumber);\n                            setEnteredValue('');\n                            setConfirmed(true);\n                            Keyboard.dismiss();\n                        }\n                    }\n                ]\n            );\n        }\n    }\n\n    // Start game\n    let confirmedOutput;\n\n    if (confirmed && confirmStartGame) {\n        confirmedOutput =\n            <Card style={styles.confirmed}>\n                <TitleText>Let's start !</TitleText>\n                <BodyText>\n                    You choose :\n                </BodyText>\n                <Number>{selectedNumber}</Number>\n                <Button\n                    title=\"START GAME\"\n                    color={Colors.green}\n                    onPress={() => {props.onStartGame(selectedNumber)}}\n                />\n            </Card>\n    }\n\n    return (\n        <ScrollView>\n            <TouchableWithoutFeedback\n                onPress={() => {\n                    Keyboard.dismiss();\n                }}\n            >\n                <View style={styles.screen}>\n                    <TitleText>Start a New Game !</TitleText>\n                    <Card style={styles.inputContainer}>\n                        <BodyText style={{...props.style, ...styles.text}}>Select a Number (1-99)</BodyText>\n                        <Input\n                            style={styles.input}\n                            blurOnSubmit\n                            autoCapitalize=\"none\"\n                            autoCorrect={false}\n                            keyboardType=\"numeric\"\n                            maxLength={2}\n                            onChangeText={numberInputHandler}\n                            value={enteredValue}\n                        />\n                        <View style={styles.buttonContainer}>\n                            <View style={styles.button}>\n                                <Button\n                                    title=\"Reset\"\n                                    onPress={resetInputHandler}\n                                    color={Colors.red}/>\n                            </View>\n                            <View style={styles.button}>\n                                <Button\n                                    title=\"Confirm\"\n                                    onPress={() => {\n                                        confirmInputHandler();\n                                    }}\n                                    color={Colors.blurple}\n                                />\n                            </View>\n                        </View>\n                    </Card>\n                    {confirmedOutput}\n                </View>\n            </TouchableWithoutFeedback>\n        </ScrollView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        padding: 10,\n        alignItems: 'center'\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        width: '100%',\n        justifyContent: 'space-between',\n        paddingHorizontal: 15\n    },\n    button: {\n        flex: 1,\n        marginHorizontal: 10\n    },\n    confirmed: {\n        width: 500,\n        maxWidth: '80%',\n        marginVertical: 15,\n        backgroundColor: Colors.blurple,\n\n    },\n    inputContainer: {\n        width: 500,\n        maxWidth: '80%',\n        alignItems: 'center',\n        backgroundColor: Colors.yellow\n    },\n    input: {\n        width: 50,\n        textAlign: 'center',\n\n    },\n    text: {\n      color: Colors.blurple,\n    },\n});\n\nexport default StartGameScreen;\n"]},"metadata":{},"sourceType":"module"}