{"version":3,"sources":["app/layout/LoadingComponent.tsx","app/api/agent.ts","app/stores/store.ts","app/stores/activityStore.ts","features/activities/details/ActivityDetails.tsx","features/activities/form/ActivityForm.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/NavBar.tsx","app/layout/App.tsx","index.tsx"],"names":["LoadingComponent","inverted","content","Dimmer","active","Loader","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","interceptors","response","use","a","console","log","reject","responseBody","data","requests","url","get","then","body","post","put","delete","agent","Activities","list","details","id","create","activity","update","store","activityStore","activityRegistry","Map","selectedActivity","undefined","editMode","loading","loadingInitial","loadActivities","forEach","date","split","set","setLoadingInitial","state","selectActivity","cancelSelectedActivity","openForm","closeForm","createActivity","uuid","runInAction","updateActivity","deleteActivity","makeAutoObservable","this","Array","from","values","sort","b","Date","parse","StoreContext","createContext","useStore","useContext","ActivityDetails","Card","fluid","Image","src","category","Content","Header","title","Meta","Description","description","extra","Button","Group","widths","onClick","basic","color","observer","initialState","city","venue","useState","setActivity","handleInputChange","event","target","name","value","Segment","clearing","Form","onSubmit","autoComplete","Input","placeholder","onChange","type","floated","positive","activitiesByDate","setTarget","Item","divided","map","as","Extra","currentTarget","handleActivityDelete","Label","Grid","Column","width","NavBar","Menu","fixed","Container","header","alt","style","marginRight","useEffect","marginTop","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4e69bf2b.chunk.js","sourcesContent":["import React from \"react\";\nimport {Dimmer, Loader} from \"semantic-ui-react\";\n\ninterface Props {\n    inverted?: boolean;\n    content?: string\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n\n}\n","import axios, {AxiosResponse} from \"axios\";\nimport {Activity} from \"../models/activity\";\n\n\nconst sleep = (delay: number) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, delay);\n    })\n}\n\naxios.defaults.baseURL = 'http://localhost:5000/api';\n\n\n// Define en Axios interceptor (here for loading behaviour)\naxios.interceptors.response.use(async response => {\n        try {\n            await sleep(1000);\n            return response;\n        } catch (error) {\n            console.log(error);\n            return await Promise.reject(error);\n        }\n    }\n)\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: () => requests.get<Activity[]>('/activities'),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: Activity) => requests.post('/activities', activity),\n    update: (activity: Activity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete(`/activities/${id}`)\n}\n\nconst agent = {\n    Activities\n}\n\nexport default agent;\n","import {createContext, useContext} from \"react\";\nimport ActivitySore from \"./activityStore\";\n\n\n// 1. Add stores to interface\ninterface Store {\n    activityStore: ActivitySore\n}\n\n// 2. Create new instance of stores\nexport const store: Store = {\n    activityStore: new ActivitySore()\n}\n\n// 3. Add newly instantiated stores to a React context\nexport const StoreContext = createContext(store);\n\n// 4. Use React hooks to use React context\nexport function useStore() {\n    return useContext(StoreContext);\n}\n","import {makeAutoObservable, runInAction} from \"mobx\";\nimport {v4 as uuid} from \"uuid\";\nimport agent from \"../api/agent\";\nimport {Activity} from \"../models/activity\";\n\n\n// MobX store initialization\nexport default class ActivitySore {\n\n    // Define variables\n    activityRegistry = new Map<String, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = true;\n\n\n    // Constructor with all variables inside\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n\n    // Create MobX actions\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values())\n            .sort((a,b) =>\n                Date.parse(a.date) - Date.parse(b.date));\n\n    }\n\n    loadActivities = async () => {\n        try {\n            // Get activities from API\n            const activities = await agent.Activities.list();\n\n            // Mutating state in MobX\n            activities.forEach(activity => {\n                activity.date = activity.date.split('T')[0];\n                this.activityRegistry.set(activity.id, activity);\n            })\n\n            this.setLoadingInitial(false);\n        } catch (err) {\n            console.log(err);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    selectActivity = (id: string) => {\n        this.selectedActivity = this.activityRegistry.get(id);\n    }\n\n    cancelSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    openForm = (id?: string) => {\n        id ? this.selectActivity(id) : this.cancelSelectedActivity();\n        this.editMode = true;\n    }\n\n    closeForm = () => {\n        this.editMode = false;\n    }\n\n    createActivity = async (activity: Activity) => {\n        this.loading = true;\n        activity.id = uuid();\n        try {\n            await agent.Activities.create(activity);\n            runInAction(() => {\n                this.activityRegistry.set(activity.id, activity);\n                this.selectedActivity = activity;\n                this.editMode = false;\n                this.loading = false;\n            })\n        } catch (err) {\n            console.log(err);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateActivity = async (activity: Activity) => {\n        this.loading = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                this.activityRegistry.set(activity.id, activity);\n\n                this.selectedActivity = activity;\n                this.editMode = false;\n                this.loading = false;\n            })\n        } catch (err) {\n            console.log(err);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n\n                if (this.selectedActivity?.id === id) this.cancelSelectedActivity();\n                this.loading = false;\n            })\n\n        } catch (err) {\n            console.log(err);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n}\n","import React from \"react\";\nimport {Button, Card, Image} from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport {useStore} from \"../../../app/stores/store\";\n\n\nexport default function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, openForm, cancelSelectedActivity} = activityStore; // Use alias\n\n    if(!activity) return <LoadingComponent />;\n\n    return (\n        <Card fluid>\n            <Image src={`/assets/images/categoryImages/${activity.category}.jpg`}/>\n            <Card.Content>\n                <Card.Header>{activity.title}</Card.Header>\n                <Card.Meta>\n                    <span>{activity.date}</span>\n                </Card.Meta>\n                <Card.Description>\n                    {activity.description}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Button.Group widths='2'>\n                    <Button onClick={()=> openForm(activity.id)} basic color='blue' content='Edit' />\n                    <Button onClick={cancelSelectedActivity} basic color='grey' content='Cancel' />\n                </Button.Group>\n            </Card.Content>\n        </Card>\n    )\n}\n","import React, {ChangeEvent, useState} from \"react\";\nimport {Button, Form, Segment} from \"semantic-ui-react\";\nimport {observer} from \"mobx-react-lite\";\nimport {useStore} from \"../../../app/stores/store\";\n\n\nexport default observer(function ActivityForm() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity, closeForm, createActivity, updateActivity, loading} = activityStore;\n\n    const initialState = selectedActivity ?? {\n        id: '',\n        title: '',\n        category: '',\n        description: '',\n        date: '',\n        city: '',\n        venue: ''\n    }\n\n    const [activity, setActivity] = useState(initialState);\n\n    function handleSubmit() {\n        activity.id ? updateActivity(activity) : createActivity(activity)\n    }\n\n    function handleInputChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        const {name, value} = event.target;\n        setActivity({...activity, [name]: value})\n    }\n\n    return (\n        <Segment clearing>\n            <Form onSubmit={handleSubmit} autoComplete=\"off\">\n                <Form.Input placeholder=\"Title\" value={activity.title} name=\"title\" onChange={handleInputChange}/>\n                <Form.Input placeholder=\"Description\" value={activity.description} name=\"description\"\n                            onChange={handleInputChange}/>\n                <Form.Input placeholder=\"Category\" value={activity.category} name=\"category\"\n                            onChange={handleInputChange}/>\n                <Form.Input type=\"date\" placeholder=\"Date\" value={activity.date} name=\"date\"\n                            onChange={handleInputChange}/>\n                <Form.Input placeholder=\"City\" value={activity.city} name=\"city\" onChange={handleInputChange}/>\n                <Form.Input placeholder=\"Venue\" value={activity.venue} name=\"venue\" onChange={handleInputChange}/>\n                <Button loading={loading} floated=\"right\" positive type=\"submit\" content=\"Submit\"/>\n                <Button onClick={closeForm} floated=\"right\" type=\"button\" content=\"Cancel\"/>\n            </Form>\n        </Segment>\n    )\n})\n","import React, {SyntheticEvent, useState} from \"react\";\nimport {Button, Item, Label, Segment} from \"semantic-ui-react\";\nimport {useStore} from \"../../../app/stores/store\";\nimport {observer} from \"mobx-react-lite\";\n\n\nexport default observer(function ActivityList() {\n\n    const {activityStore} = useStore();\n    const {deleteActivity, activitiesByDate, loading} = activityStore;\n\n    const[target, setTarget] = useState('');\n\n    function handleActivityDelete(event: SyntheticEvent<HTMLButtonElement>, id: string) {\n        setTarget(event.currentTarget.name);\n        deleteActivity(id);\n    }\n\n    return (\n        <Segment>\n            <Item.Group divided>\n                {activitiesByDate.map(activity => (\n                    <Item key={activity.id}>\n                        <Item.Content>\n                            <Item.Header as='a'>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Meta>\n                                {activity.date}\n                            </Item.Meta>\n                            <Item.Description>\n                                <div>{activity.description}</div>\n                                <div>{activity.city}, {activity.venue}</div>\n                            </Item.Description>\n                            <Item.Extra>\n                                <Button onClick={() => activityStore.selectActivity(activity.id)} floated='right' content='View' color='blue'/>\n                                <Button\n                                    name={activity.id}\n                                    loading={loading && target === activity.id}\n                                    onClick={(event) => handleActivityDelete(event, activity.id)}\n                                    floated='right'\n                                    content='Delete'\n                                    color='red'\n                                />\n                                <Label basic content={activity.category}/>\n                            </Item.Extra>\n                        </Item.Content>\n                    </Item>\n                ))}\n            </Item.Group>\n        </Segment>\n    )\n})\n","import React from \"react\";\nimport {Grid} from \"semantic-ui-react\";\nimport {observer} from \"mobx-react-lite\";\nimport ActivityDetails from \"../details/ActivityDetails\";\nimport ActivityForm from \"../form/ActivityForm\";\nimport ActivityList from \"./ActivityList\";\nimport {useStore} from \"../../../app/stores/store\";\n\n\nexport default observer(function ActivityDashboard() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity, editMode} = activityStore;\n\n    return (\n        <Grid>\n            <Grid.Column width=\"10\">\n                <ActivityList />\n            </Grid.Column>\n            <Grid.Column width=\"6\">\n                {selectedActivity && !editMode &&\n                <ActivityDetails />}\n                {editMode &&\n                <ActivityForm />}\n            </Grid.Column>\n        </Grid>\n    )\n});\n","import React from \"react\";\nimport {Button, Container, Menu} from \"semantic-ui-react\";\nimport {useStore} from \"../stores/store\";\n\nexport default function NavBar() {\n    const {activityStore} = useStore();\n\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item header>\n                    <img src=\"/assets/images/logo.png\" alt=\"logo\" style={{marginRight: '1em'}}/>\n                    Soci'Act\n                </Menu.Item>\n                <Menu.Item name='Activities'/>\n                <Menu.Item>\n                    <Button onClick={() => activityStore.openForm()} positive content='Create Activity'/>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n}\n","import React, {useEffect} from 'react';\nimport {Container} from \"semantic-ui-react\";\nimport {observer} from \"mobx-react-lite\";\nimport './style.css';\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport NavBar from \"./NavBar\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport {useStore} from \"../stores/store\";\n\nfunction App() {\n\n    // Import React context with React hooks (destructured)\n    const {activityStore} = useStore();\n\n    useEffect(() => {\n        activityStore.loadActivities();\n    }, [activityStore]);\n\n    if (activityStore.loadingInitial) return <LoadingComponent/>\n\n    return (\n        <>\n            <NavBar/>\n            <Container style={{marginTop: '7em'}}>\n                <ActivityDashboard/>\n            </Container>\n        </>\n    );\n}\n\nexport default observer(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport {store, StoreContext} from './app/stores/store';\n\nReactDOM.render(\n    // <React.StrictMode>\n    <StoreContext.Provider value={store}>\n        <App/>\n    </StoreContext.Provider>,\n// </React.StrictMode>,\ndocument.getElementById('root')\n)\n;\n"],"sourceRoot":""}