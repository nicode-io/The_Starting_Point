{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/App.js\";\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport Colors from \"./constants/colors\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOver from \"./screens/GameOver\";\nimport Header from \"./components/Header\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nvar App = function App(props) {\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNumber = _useState2[0],\n      setUserNumber = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      guessRounds = _useState4[0],\n      setGuessRounds = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      onError: function onError(err) {\n        return console.log(err);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    });\n  }\n\n  var startGameHandler = function startGameHandler(selectedNumber) {\n    setUserNumber(selectedNumber);\n    setGuessRounds(0);\n  };\n\n  var gameOverHandler = function gameOverHandler(numOfRounds) {\n    setGuessRounds(numOfRounds);\n  };\n\n  var startNewGame = function startNewGame() {\n    setGuessRounds(0);\n    setUserNumber('');\n  };\n\n  var content = React.createElement(StartGameScreen, {\n    onStartGame: startGameHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }\n  });\n\n  if (userNumber && guessRounds <= 0) {\n    content = React.createElement(GameScreen, {\n      userChoice: userNumber,\n      onGameOver: gameOverHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    });\n  } else if (guessRounds > 0) {\n    content = React.createElement(GameOver, {\n      rounds: guessRounds,\n      onStartNewGame: startNewGame,\n      userNumber: userNumber,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(Header, {\n    title: \"Guess a Number\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), content);\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    backgroundColor: Colors.blurple\n  }\n});\nexport default App;","map":{"version":3,"sources":["/Users/nicode/Development/Projects/Github/ReactNative_Cursus/02-NumberGuesser/App.js"],"names":["React","useState","AppLoading","Font","Colors","GameScreen","GameOver","Header","StartGameScreen","fetchFonts","loadAsync","require","App","props","undefined","userNumber","setUserNumber","guessRounds","setGuessRounds","dataLoaded","setDataLoaded","err","console","log","startGameHandler","selectedNumber","gameOverHandler","numOfRounds","startNewGame","content","styles","screen","StyleSheet","create","flex","backgroundColor","blurple"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport {AppLoading} from 'expo';\nimport * as Font from 'expo-font';\n\nimport Colors from './constants/colors';\nimport GameScreen from './screens/GameScreen';\nimport GameOver from './screens/GameOver';\nimport Header from './components/Header';\nimport StartGameScreen from './screens/StartGameScreen';\n\n// Load fonts\nconst fetchFonts = () => {\n    return Font.loadAsync({\n        'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n        'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf')\n    });\n};\n\nconst App = props => {\n    // States\n    const [userNumber, setUserNumber] = useState(undefined);\n    const [guessRounds, setGuessRounds] = useState(0);\n    const [dataLoaded, setDataLoaded] = useState(false);\n\n    // Check if async font loading is done\n    if (!dataLoaded) {\n        return (\n            <AppLoading\n                startAsync={fetchFonts}\n                onFinish={() => setDataLoaded(true)}\n                onError={err => console.log(err)}\n            />\n        );\n    }\n\n    // Handlers\n    const startGameHandler = selectedNumber => {\n        setUserNumber(selectedNumber);\n        setGuessRounds(0);\n    }\n\n    const gameOverHandler = numOfRounds => {\n        setGuessRounds(numOfRounds);\n    }\n\n    const startNewGame = () => {\n        setGuessRounds(0);\n        setUserNumber('');\n    }\n\n    // Manage layout content\n    let content = <StartGameScreen\n        onStartGame={startGameHandler}\n    />\n\n\n    if (userNumber && guessRounds <= 0) {\n        content = <GameScreen\n            userChoice={userNumber}\n            onGameOver={gameOverHandler}\n        />\n    } else if (guessRounds > 0) {\n        content = <GameOver rounds={guessRounds} onStartNewGame={startNewGame} userNumber={userNumber}/>;\n    }\n\n    return (\n        <View style={styles.screen}>\n            <Header title=\"Guess a Number\"/>\n            {content}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    screen: {\n        flex: 1,\n        backgroundColor: Colors.blurple,\n    }\n});\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}